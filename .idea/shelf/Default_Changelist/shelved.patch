Index: src/com/java8/stream/PeekSkipExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/PeekSkipExample.java b/src/com/java8/streamapi/PeekSkipExample.java
rename from src/com/java8/stream/PeekSkipExample.java
rename to src/com/java8/streamapi/PeekSkipExample.java
--- a/src/com/java8/stream/PeekSkipExample.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/PeekSkipExample.java	(date 1622439859621)
@@ -1,4 +1,4 @@
-package com.java8.stream;
+package com.java8.streamapi;
 
 import java.util.stream.Stream;
 
Index: src/com/java8/stream/MapperIntExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/MapperIntExample.java b/src/com/java8/streamapi/MapperIntExample.java
rename from src/com/java8/stream/MapperIntExample.java
rename to src/com/java8/streamapi/MapperIntExample.java
--- a/src/com/java8/stream/MapperIntExample.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/MapperIntExample.java	(date 1622439859465)
@@ -1,4 +1,4 @@
-package com.java8.stream;
+package com.java8.streamapi;
 
 import java.util.Arrays;
 import java.util.List;
Index: src/com/java8/stream/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/User.java b/src/com/java8/streamapi/User.java
rename from src/com/java8/stream/User.java
rename to src/com/java8/streamapi/User.java
--- a/src/com/java8/stream/User.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/User.java	(date 1622439859573)
@@ -1,4 +1,4 @@
-package com.java8.stream;
+package com.java8.streamapi;
 
 public class User {
 
Index: src/com/java8/stream/FilterExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/FilterExample.java b/src/com/java8/streamapi/FilterExample.java
rename from src/com/java8/stream/FilterExample.java
rename to src/com/java8/streamapi/FilterExample.java
--- a/src/com/java8/stream/FilterExample.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/FilterExample.java	(date 1622439859529)
@@ -1,4 +1,4 @@
-package org.java8.stream;
+package com.java8.streamapi;
 
 import java.util.Arrays;
 import java.util.List;
Index: src/com/java8/stream/MapperExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/MapperExample.java b/src/com/java8/streamapi/MapperExample.java
rename from src/com/java8/stream/MapperExample.java
rename to src/com/java8/streamapi/MapperExample.java
--- a/src/com/java8/stream/MapperExample.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/MapperExample.java	(date 1622439859709)
@@ -1,4 +1,4 @@
-package com.java8.stream;
+package com.java8.streamapi;
 
 import java.util.Arrays;
 import java.util.List;
Index: src/com/java8/stream/StreamWithFilesExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/stream/StreamWithFilesExample.java b/src/com/java8/streamapi/StreamWithFilesExample.java
rename from src/com/java8/stream/StreamWithFilesExample.java
rename to src/com/java8/streamapi/StreamWithFilesExample.java
--- a/src/com/java8/stream/StreamWithFilesExample.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/java8/streamapi/StreamWithFilesExample.java	(date 1622439859665)
@@ -1,4 +1,4 @@
-package com.java8.stream;
+package com.java8.streamapi;
 
 import java.io.IOException;
 import java.nio.file.Files;
Index: .classpath
===================================================================
diff --git a/.classpath b/.classpath
deleted file mode 100644
--- a/.classpath	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ /dev/null	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry including="**/*.java" kind="src" output="target/classes" path="src">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry exported="true" kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.jdt.junit.JUNIT_CONTAINER/4"/>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
Index: .project
===================================================================
diff --git a/.project b/.project
deleted file mode 100644
--- a/.project	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ /dev/null	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>Java8</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.m2e.core.maven2Builder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.m2e.core.maven2Nature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
Index: target/classes/META-INF/maven/Java8/Java8/pom.xml
===================================================================
diff --git a/target/classes/META-INF/maven/Java8/Java8/pom.xml b/target/classes/META-INF/maven/Java8/Java8/pom.xml
deleted file mode 100644
--- a/target/classes/META-INF/maven/Java8/Java8/pom.xml	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ /dev/null	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
@@ -1,103 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<groupId>Java8</groupId>
-	<artifactId>Java8</artifactId>
-	<version>0.0.1-SNAPSHOT</version>
-	<build>
-		<sourceDirectory>src</sourceDirectory>
-		<resources>
-			<resource>
-				<directory>src</directory>
-				<excludes>
-					<exclude>**/*.java</exclude>
-				</excludes>
-			</resource>
-		</resources>
-
-
-		<dependencies>
-			<dependency>
-				<groupId>junit</groupId>
-				<artifactId>junit</artifactId>
-				<version>4.9</version>
-				<scope>test</scope>
-			</dependency>
-
-			<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
-			<dependency>
-				<groupId>org.hamcrest</groupId>
-				<artifactId>hamcrest-all</artifactId>
-				<version>1.3</version>
-				<scope>test</scope>
-			</dependency>
-
-			<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
-			<dependency>
-				<groupId>javax.ws.rs</groupId>
-				<artifactId>javax.ws.rs-api</artifactId>
-				<version>2.0</version>
-			</dependency>
-
-			<dependency>
-				<groupId>org.powermock</groupId>
-				<artifactId>powermock-api-mockito</artifactId>
-				<version>1.6.4</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.powermock</groupId>
-				<artifactId>powermock-module-junit4</artifactId>
-				<version>1.6.4</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>junit</groupId>
-				<artifactId>junit</artifactId>
-				<version>4.9</version>
-				<scope>test</scope>
-			</dependency>
-
-			<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
-			<dependency>
-				<groupId>org.hamcrest</groupId>
-				<artifactId>hamcrest-all</artifactId>
-				<version>1.3</version>
-				<scope>test</scope>
-			</dependency>
-
-			<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
-			<dependency>
-				<groupId>javax.ws.rs</groupId>
-				<artifactId>javax.ws.rs-api</artifactId>
-				<version>2.0</version>
-			</dependency>
-
-			<dependency>
-				<groupId>org.powermock</groupId>
-				<artifactId>powermock-api-mockito</artifactId>
-				<version>1.6.4</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.powermock</groupId>
-				<artifactId>powermock-module-junit4</artifactId>
-				<version>1.6.4</version>
-				<scope>test</scope>
-			</dependency>
-
-		</dependencies>
-
-		<plugins>
-			<plugin>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>3.7.0</version>
-				<configuration>
-					<source>1.8</source>
-					<target>1.8</target>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
-</project>
\ No newline at end of file
Index: src/com/java8/date/ClockExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/ClockExample1.java b/src/com/java8/date/ClockExample1.java
new file mode 100644
--- /dev/null	(date 1622438991071)
+++ b/src/com/java8/date/ClockExample1.java	(date 1622438991071)
@@ -0,0 +1,20 @@
+package com.java8.date;
+
+import java.time.Clock;
+import java.time.Duration;
+
+public class ClockExample1 {
+    public static void main(String[] args) {
+        Clock c = Clock.systemDefaultZone();
+        System.out.println(c.getZone());
+
+        Clock c1= Clock.systemUTC();
+        System.out.println(c1.instant());
+        Duration d = Duration.ofHours(5);
+        Clock clock = Clock.offset(c1, d);
+        System.out.println(clock.instant());
+
+
+
+    }
+}
Index: src/com/java8/date/PeriodExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/PeriodExample1.java b/src/com/java8/date/PeriodExample1.java
new file mode 100644
--- /dev/null	(date 1622438990935)
+++ b/src/com/java8/date/PeriodExample1.java	(date 1622438990935)
@@ -0,0 +1,17 @@
+package com.java8.date;
+
+import java.time.LocalDate;
+import java.time.Period;
+import java.time.temporal.Temporal;
+/*
+Java Period class is used to measures time in years, months and days.
+It inherits the Object class and implements the ChronoPeriod interface.
+ */
+public class PeriodExample1 {
+    public static void main(String[] args) {
+        Period period = Period.ofDays(24);
+        System.out.println(period);
+        Temporal temp = period.addTo(LocalDate.now());
+        System.out.println(temp);
+    }
+}
Index: src/com/java8/date/YearExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/YearExample1.java b/src/com/java8/date/YearExample1.java
new file mode 100644
--- /dev/null	(date 1622438990895)
+++ b/src/com/java8/date/YearExample1.java	(date 1622438990895)
@@ -0,0 +1,15 @@
+package com.java8.date;
+
+import java.time.Year;
+/*
+Java Year class is an immutable date-time object that represents a year.
+It inherits the Object class and implements the Comparable interface.
+
+
+ */
+public class YearExample1 {
+    public static void main(String[] args) {
+        Year y = Year.now();
+        System.out.println(y);
+    }
+}
Index: src/com/java8/date/LocalDateExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/LocalDateExample1.java b/src/com/java8/date/LocalDateExample1.java
new file mode 100644
--- /dev/null	(date 1622438991379)
+++ b/src/com/java8/date/LocalDateExample1.java	(date 1622438991379)
@@ -0,0 +1,17 @@
+package com.java8.date;
+
+import java.time.LocalDate;
+/*
+Java LocalDate class is an immutable class that represents Date with a default format of yyyy-MM-dd.
+It inherits Object class and implements the ChronoLocalDate interface
+ */
+public class LocalDateExample1 {
+    public static void main(String[] args) {
+        LocalDate date = LocalDate.now();
+        LocalDate yesterday = date.minusDays(1);
+        LocalDate tomorrow = yesterday.plusDays(2);
+        System.out.println("Today date: "+date);
+        System.out.println("Yesterday date: "+yesterday);
+        System.out.println("Tommorow date: "+tomorrow);
+    }
+}
Index: src/com/java8/date/YearMonthExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/YearMonthExample1.java b/src/com/java8/date/YearMonthExample1.java
new file mode 100644
--- /dev/null	(date 1622438991231)
+++ b/src/com/java8/date/YearMonthExample1.java	(date 1622438991231)
@@ -0,0 +1,15 @@
+package com.java8.date;
+
+import java.time.YearMonth;
+/*
+Java YearMonth class is an immutable date-time object that represents the combination of a year and month.
+It inherits the Object class and implements the Comparable interface.
+
+
+ */
+public class YearMonthExample1 {
+    public static void main(String[] args) {
+        YearMonth ym = YearMonth.now();
+        System.out.println(ym);
+    }
+}
Index: src/com/java8/date/ZoneIdExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/ZoneIdExample1.java b/src/com/java8/date/ZoneIdExample1.java
new file mode 100644
--- /dev/null	(date 1622438991187)
+++ b/src/com/java8/date/ZoneIdExample1.java	(date 1622438991187)
@@ -0,0 +1,22 @@
+package com.java8.date;
+
+import java.time.LocalTime;
+import java.time.ZoneId;
+
+/*
+Java ZoneId class specifies a time zone identifier and provides a rule for converting between an Instant and a LocalDateTime.
+It inherits Object class and implements the Serializable interface.
+ */
+public class ZoneIdExample1 {
+
+    public static void main(String[] args) {
+        ZoneId zoneid1 = ZoneId.of("Asia/Kolkata");
+        ZoneId zoneid2 = ZoneId.of("Asia/Tokyo");
+        LocalTime id1 = LocalTime.now(zoneid1);
+        LocalTime id2 = LocalTime.now(zoneid2);
+        System.out.println(id1);
+        System.out.println(id2);
+        System.out.println(id1.isBefore(id2));
+    }
+
+}
Index: src/com/java8/date/DurationExample1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/DurationExample1.java b/src/com/java8/date/DurationExample1.java
new file mode 100644
--- /dev/null	(date 1622438991447)
+++ b/src/com/java8/date/DurationExample1.java	(date 1622438991447)
@@ -0,0 +1,21 @@
+package com.java8.date;
+
+import java.time.Duration;
+import java.time.LocalTime;
+import java.time.temporal.ChronoUnit;
+
+/*
+Java Duration class is used to measures time in seconds and nanoseconds.
+It inherits the Object class and implements the Comparable interface.
+
+
+ */
+public class DurationExample1 {
+
+    public static void main(String[] args) {
+        Duration d = Duration.between(LocalTime.NOON, LocalTime.MAX);
+        System.out.println(d.get(ChronoUnit.SECONDS));
+        System.out.println(d.get(ChronoUnit.NANOS));
+        //System.out.println(d.get(ChronoUnit.HOURS));
+    }
+}
Index: src/com/java8/date/LocalDateTimeExample2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/date/LocalDateTimeExample2.java b/src/com/java8/date/LocalDateTimeExample2.java
new file mode 100644
--- /dev/null	(date 1622438991347)
+++ b/src/com/java8/date/LocalDateTimeExample2.java	(date 1622438991347)
@@ -0,0 +1,29 @@
+package com.java8.date;
+
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.time.temporal.ChronoField;
+
+public class LocalDateTimeExample2 {
+    public static void main(String[] args) {
+        LocalDateTime datetime1 = LocalDateTime.now();
+        DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
+        String formatDateTime = datetime1.format(format);
+        System.out.println(formatDateTime);
+        System.out.println("-----------------------------------");
+        LocalDateTime a = LocalDateTime.of(2017, 2, 13, 15, 56);
+        System.out.println(a.get(ChronoField.DAY_OF_WEEK));
+        System.out.println(a.get(ChronoField.DAY_OF_YEAR));
+        System.out.println(a.get(ChronoField.DAY_OF_MONTH));
+        System.out.println(a.get(ChronoField.HOUR_OF_DAY));
+        System.out.println(a.get(ChronoField.MINUTE_OF_DAY));
+        System.out.println("-----------------------------------");
+        LocalDateTime datetime3 = LocalDateTime.of(2017, 1, 14, 10, 34);
+        LocalDateTime datetime2 = datetime3.minusDays(100);
+        System.out.println("Before Formatting: " + datetime2);
+        DateTimeFormatter format1 = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm");
+        String formatDateTime1 = datetime2.format(format1);
+        System.out.println("After Formatting: " + formatDateTime1);
+
+    }
+}
Index: src/com/java8/functional/Test.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/functional/Test.java b/src/com/java8/functional/Test.java
new file mode 100644
--- /dev/null	(date 1622438990979)
+++ b/src/com/java8/functional/Test.java	(date 1622438990979)
@@ -0,0 +1,13 @@
+package com.java8.functional;
+
+import java.util.function.Function;
+
+public class Test {
+
+    public static void main(String[] args) {
+        CalInf function=(x,y)->{return x+y;};
+        int res=function.sum(10,20);
+        System.out.println(res);
+    }
+
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>Java8</groupId>\n\t<artifactId>Java8</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\n\t<name>java8</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>4.9</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->\n\t\t<dependency>\n\t\t\t<groupId>org.hamcrest</groupId>\n\t\t\t<artifactId>hamcrest-all</artifactId>\n\t\t\t<version>1.3</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->\n\t\t<dependency>\n\t\t\t<groupId>javax.ws.rs</groupId>\n\t\t\t<artifactId>javax.ws.rs-api</artifactId>\n\t\t\t<version>2.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-api-mockito</artifactId>\n\t\t\t<version>1.6.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-module-junit4</artifactId>\n\t\t\t<version>1.6.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>4.9</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->\n\t\t<dependency>\n\t\t\t<groupId>org.hamcrest</groupId>\n\t\t\t<artifactId>hamcrest-all</artifactId>\n\t\t\t<version>1.3</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->\n\t\t<dependency>\n\t\t\t<groupId>javax.ws.rs</groupId>\n\t\t\t<artifactId>javax.ws.rs-api</artifactId>\n\t\t\t<version>2.0</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-api-mockito</artifactId>\n\t\t\t<version>1.6.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-module-junit4</artifactId>\n\t\t\t<version>1.6.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/pom.xml	(date 1622439349890)
@@ -2,11 +2,11 @@
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 	<modelVersion>4.0.0</modelVersion>
-	<groupId>Java8</groupId>
-	<artifactId>Java8</artifactId>
+	<groupId>java-advance-feature</groupId>
+	<artifactId>java-advance-feature</artifactId>
 	<version>0.0.1-SNAPSHOT</version>
 
-	<name>java8</name>
+	<name>java-advance-feature</name>
 	<url>http://maven.apache.org</url>
 
 	<properties>
@@ -55,6 +55,33 @@
 			<scope>test</scope>
 		</dependency>
 
+		<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
+		<dependency>
+			<groupId>org.hamcrest</groupId>
+			<artifactId>hamcrest-all</artifactId>
+			<version>1.3</version>
+			<scope>test</scope>
+		</dependency>
+
+		<!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
+		<dependency>
+			<groupId>javax.ws.rs</groupId>
+			<artifactId>javax.ws.rs-api</artifactId>
+			<version>2.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.powermock</groupId>
+			<artifactId>powermock-api-mockito</artifactId>
+			<version>1.6.4</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.powermock</groupId>
+			<artifactId>powermock-module-junit4</artifactId>
+			<version>1.6.4</version>
+			<scope>test</scope>
+		</dependency>
 		<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
 		<dependency>
 			<groupId>org.hamcrest</groupId>
Index: src/com/java8/functional/CalInf.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/functional/CalInf.java b/src/com/java8/functional/CalInf.java
new file mode 100644
--- /dev/null	(date 1622438991119)
+++ b/src/com/java8/functional/CalInf.java	(date 1622438991119)
@@ -0,0 +1,5 @@
+package com.java8.functional;
+
+public interface CalInf {
+    public int sum(int a, int b);
+}
Index: src/com/java8/streamapi/StreamTeaminalOperation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/streamapi/StreamTeaminalOperation.java b/src/com/java8/streamapi/StreamTeaminalOperation.java
new file mode 100644
--- /dev/null	(date 1622438991311)
+++ b/src/com/java8/streamapi/StreamTeaminalOperation.java	(date 1622438991311)
@@ -0,0 +1,56 @@
+package com.java8.streamapi;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class StreamTeaminalOperation {
+    public static void main(String[] args) {
+        List<String> stringList = new ArrayList<String>();
+
+        stringList.add("abc");
+        stringList.add("def");
+        long count = stringList.stream()
+                .map((value) -> { return value.toLowerCase(); })
+                .map((value) -> { return value.toUpperCase(); })
+                .map((value) -> { return value.substring(0,3); })
+                .count();
+        System.out.println("Count:"+count);
+
+
+        List<String> stringList2 = new ArrayList<String>();
+
+        stringList2.add("One flew over the cuckoo's nest");
+        stringList2.add("To kill a muckingbird");
+        stringList2.add("Gone with the wind");
+
+        boolean anyMatch = stringList2.stream().anyMatch((value) -> { return value.startsWith("One"); });
+        System.out.println("Any Match:"+anyMatch);
+
+        boolean allMatch = stringList2.stream().allMatch((value) -> { return value.startsWith("One"); });
+        System.out.println("allMatch():"+allMatch);
+
+        boolean noneMatch = stringList2.stream().noneMatch((element) -> {
+            return "xyz".equals(element);
+        });
+
+        System.out.println("noneMatch())" + noneMatch);
+
+        List<String> stringsAsUppercaseList = stringList2.stream()
+                .map(value -> value.toUpperCase())
+                .collect(Collectors.toList());
+
+        System.out.println("Collect():"+stringsAsUppercaseList);
+
+        Optional<String> anyElement = stringList2.stream().findAny();
+
+        System.out.println("findAny():"+anyElement.get());
+
+
+        Optional<String> result = stringList2.stream().findFirst();
+
+        System.out.println("findFist():"+result.get());
+    }
+}
Index: src/com/java8/Difference : Default Method and Regular Method
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/Difference : Default Method and Regular Method b/src/com/java8/Difference : Default Method and Regular Method
new file mode 100644
--- /dev/null	(date 1596260569956)
+++ b/src/com/java8/Difference : Default Method and Regular Method	(date 1596260569956)
@@ -0,0 +1,12 @@
+Difference Between Default Method and Regular Method
+Default Method is different from the regular method in the sense that default method comes with default modifier. 
+Additionally, methods in classes can use and modify method arguments as well as the fields of their class, 
+but default method, on the other hand, can only access its arguments as interfaces do not have any state.
+
+In summary, Default methods enable us to add new functionality to existing interfaces without breaking older implementation of these interfaces.
+
+When we extend an interface that contains a default method, we can perform following,
+
+Not override the default method and will inherit the default method.
+Override the default method similar to other methods we override in subclass..
+Redeclare default method as abstract, which force subclass to override it.
\ No newline at end of file
Index: src/com/java8/streamapi/StreamExamples.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/streamapi/StreamExamples.java b/src/com/java8/streamapi/StreamExamples.java
new file mode 100644
--- /dev/null	(date 1622438991279)
+++ b/src/com/java8/streamapi/StreamExamples.java	(date 1622438991279)
@@ -0,0 +1,82 @@
+package com.java8.streamapi;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/*
+A non-terminal stream operation is an operation that adds a listener to the stream without doing anything else.
+A terminal stream operation is an operation that starts the internal iteration of the elements, calls all the listeners, and returns a result.
+ */
+
+public class StreamExamples {
+    public static void main(String[] args) {
+        List<String> stringList = new ArrayList<String>();
+
+        stringList.add("ONE");
+        stringList.add("TWO");
+        stringList.add("THREE");
+
+        Stream<String> stream = stringList.stream();
+
+        long count = stream
+                .map((value) -> { return value.toLowerCase(); }) // non-terminal stream operation
+                .count(); //terminal stream operation
+
+        System.out.println("count = " + count);
+
+        //map() :stream map(): This call actually returns a new Stream instance representing the original stream of strings with the map operation applied.
+        stream=stringList.stream();
+        Stream<String> stream1 = stream
+                .map((value) -> { return value.toUpperCase(); })
+                .map((value) -> { return value.toLowerCase(); })
+                .map((value) -> { return value.substring(0,3); });
+
+        //distinct(): :non-terminal operation that returns a new Stream which will only contain the distinct elements from the original stream.
+        // Any duplicates will be eliminated.
+        List<String> stringList1 = new ArrayList<String>();
+
+        stringList1.add("one");
+        stringList1.add("two");
+        stringList1.add("three");
+        stringList1.add("one");
+
+        Stream<String> stream2 = stringList.stream();
+
+        List<String> distinctStrings = stream2
+                .distinct()
+                .collect(Collectors.toList());
+
+        System.out.println("Remove Duplicate :"+distinctStrings);
+
+        //limit() : imit the number of elements in a stream to a number given to the limit() method as parameter.
+        // The limit() method returns a new Stream which will at most contain the given number of elements.
+
+        List<String> stringList3 = new ArrayList<String>();
+
+        stringList3.add("one");
+        stringList3.add("two");
+        stringList3.add("three");
+        stringList3.add("one");
+
+        stringList.stream().limit(2)
+                .forEach( element -> { System.out.println("limit 2:"+element); });
+
+
+        //java.util.function.Consumer
+        //peek(): The Java Stream peek() method is a non-terminal operation that takes a Consumer (java.util.function.Consumer) as parameter.
+        // The Consumer will get called for each element in the stream.
+        // The peek() method returns a new Stream which contains all the elements in the original stream.
+        List<String> stringList4 = new ArrayList<String>();
+
+        stringList.add("abc");
+        stringList.add("def");
+        Stream<String> stream4 = stringList4.stream();
+
+        Stream<String> streamPeeked = stream4.peek((value) -> {
+            System.out.println("value:"+value);
+        });
+
+    }
+}
Index: src/com/java8/InterfaceAmbiguityProblem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/InterfaceAmbiguityProblem.java b/src/com/java8/InterfaceAmbiguityProblem.java
new file mode 100644
--- /dev/null	(date 1622438991027)
+++ b/src/com/java8/InterfaceAmbiguityProblem.java	(date 1622438991027)
@@ -0,0 +1,33 @@
+package com.java8;
+
+
+interface InterfaceA {
+    default void defaultMethod(){
+        System.out.println("Interface A default method");
+    }
+}
+interface InterfaceB {
+    default void defaultMethod(){
+        System.out.println("Interface B default method");
+    }
+}
+
+/*
+The above code will fail to compile with the following error:
+java: class InterfaceAmbiguityProblem inherits unrelated defaults for defaultMethod() from types InterfaceA and InterfaceB
+*/
+/*
+* In order to fix this class, we need to provide a default method implementation:
+ * */
+
+public class InterfaceAmbiguityProblem implements InterfaceA, InterfaceB  {
+
+    @Override
+    public void defaultMethod() {
+        /*
+            Further, if we want to invoke default implementation provided by any super interface rather than our own implementation,
+            we can do so as follows:
+        */
+        InterfaceA.super.defaultMethod();
+    }
+}
Index: src/com/java8/StringJoinDemo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java8/StringJoinDemo.java b/src/com/java8/StringJoinDemo.java
new file mode 100644
--- /dev/null	(date 1622438991411)
+++ b/src/com/java8/StringJoinDemo.java	(date 1622438991411)
@@ -0,0 +1,21 @@
+package com.java8;
+
+import java.time.ZoneId;
+/*
+String.join() method where first parameter is separator
+and then you can pass either multiple strings or some instance of Iterable having instances of strings as second parameter.
+It will return the CSV in return.
+
+
+ */
+public class StringJoinDemo {
+
+    public static void main(String[] args){
+        String joined = String.join("/","usr","local","bin");
+        System.out.println(joined);
+
+        String ids = String.join(", ", ZoneId.getAvailableZoneIds());
+        System.out.println(ids);
+    }
+
+}
Index: src/com/unittesting/junit4/TCMatcher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.unittesting.junit4;\n\nimport static org.hamcrest.Matchers.hasProperty;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.startsWith;\n\nimport javax.ws.rs.NotFoundException;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.Response.Status;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\n\n//you can use Matchers to inspect the Exception, useful if it has embedded state you wish to verify. For example\n\npublic class TCMatcher {\n\n\t@Rule\n\tpublic ExpectedException thrown = ExpectedException.none();\n\n\t@Test\n\tpublic void shouldThrow() {\n\t\tTestThing testThing = new TestThing();\n\t\tthrown.expect(NotFoundException.class);\n\t\tthrown.expectMessage(startsWith(\"some Message\"));\n\t\tthrown.expect(hasProperty(\"response\", hasProperty(\"status\", is(404))));\n\t\ttestThing.chuck();\n\t}\n\n\tprivate class TestThing {\n\t\tpublic void chuck() {\n\t\t\tResponse response = Response.status(Status.NOT_FOUND).entity(\"Resource not found\").build();\n\t\t\tthrow new NotFoundException(\"some Message\", response);\n\t\t}\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/unittesting/junit4/TCMatcher.java b/src/com/unittesting/junit4/TCMatcher.java
--- a/src/com/unittesting/junit4/TCMatcher.java	(revision 4a6deffb0d77b98d369c26566dd4f20e892716c6)
+++ b/src/com/unittesting/junit4/TCMatcher.java	(date 1622439763862)
@@ -1,5 +1,6 @@
 package com.unittesting.junit4;
 
+/*
 import static org.hamcrest.Matchers.hasProperty;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.startsWith;
@@ -7,6 +8,7 @@
 import javax.ws.rs.NotFoundException;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.Response.Status;
+*/
 
 import org.junit.Rule;
 import org.junit.Test;
@@ -21,18 +23,18 @@
 
 	@Test
 	public void shouldThrow() {
-		TestThing testThing = new TestThing();
+		/*TestThing testThing = new TestThing();
 		thrown.expect(NotFoundException.class);
 		thrown.expectMessage(startsWith("some Message"));
 		thrown.expect(hasProperty("response", hasProperty("status", is(404))));
-		testThing.chuck();
+		testThing.chuck();*/
 	}
 
 	private class TestThing {
-		public void chuck() {
+		/*public void chuck() {
 			Response response = Response.status(Status.NOT_FOUND).entity("Resource not found").build();
 			throw new NotFoundException("some Message", response);
-		}
+		}*/
 	}
 
 }
Index: src/com/java9/PrivateMethod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/PrivateMethod.java b/src/com/java9/PrivateMethod.java
new file mode 100644
--- /dev/null	(date 1622439080036)
+++ b/src/com/java9/PrivateMethod.java	(date 1622439080036)
@@ -0,0 +1,43 @@
+package com.java9;
+
+public interface PrivateMethod {
+
+    //Private method to reduce duplication of code
+    private void privateMethod(){
+        System.out.println("Private Method from PrivateMethod Interface...");
+    }
+
+    //Static method Implementation of Interface
+    public static void staticMethod(){
+        System.out.println("Default Method from PrivateMethod Interface...");
+    }
+
+    /*
+     * Java 8 introduces the “Default Method” or (Defender methods) feature, which allows the developer to add new methods to the interfaces without breaking their existing implementation.
+     * It provides the flexibility to allow interface to define implementation which will use as the default in a situation where a concrete class fails to provide an implementation for that method.
+     * */
+    /**
+     * Reengineering an existing JDK framework is always very complex.
+     * Modifying one interface in a JDK framework breaks all classes that extend the interface, which means that adding any new method could break millions of lines of code.
+     * Therefore, default methods have introduced as a mechanism to extend interfaces in a backward-compatible way.
+     */
+    default void defaultMethod(){
+        System.out.println("defaultMethod() from PrivateMethod Interface...");
+    }
+
+
+    public static void main(String[] args) {
+        System.out.println("public static void main(String[] args) from PrivateMethod Interface...");
+        staticMethod();
+    }
+}
+
+
+class TestClass implements PrivateMethod{
+    public static void main(String[] args) {
+        PrivateMethod privateMethod=new TestClass();
+        privateMethod.defaultMethod();
+        PrivateMethod.staticMethod();
+
+    }
+}
\ No newline at end of file
Index: java-advance-feature.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/java-advance-feature.iml b/java-advance-feature.iml
new file mode 100644
--- /dev/null	(date 1622439477304)
+++ b/java-advance-feature.iml	(date 1622439477304)
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="EclipseModuleManager">
+    <conelement value="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER" />
+    <src_description expected_position="0">
+      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
+    </src_description>
+  </component>
+  <component name="NewModuleRootManager">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="jdk" jdkName="JavaSE-1.14" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER" level="application" />
+    <orderEntry type="module-library">
+      <library name="junit4">
+        <CLASSES>
+          <root url="jar://$APPLICATION_HOME_DIR$/lib/junit4.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: src/com/java9/ProcessingApiExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/ProcessingApiExample.java b/src/com/java9/ProcessingApiExample.java
new file mode 100644
--- /dev/null	(date 1622439079952)
+++ b/src/com/java9/ProcessingApiExample.java	(date 1622439079952)
@@ -0,0 +1,23 @@
+package com.java9;
+
+/*
+Java has improved its process API in Java 9 version that helps to manage and control operating system processes.
+In earlier versions, it was complex to manage and control operating system processes by using Java programming.
+ProcessHandle helps to handle and control processes. We can monitor processes, list its children, get information etc.
+
+
+
+ */
+public class ProcessingApiExample {
+
+    public static void main(String[] args) {
+        ProcessHandle currentProcess = ProcessHandle.current();     // Current processhandle
+        System.out.println("Process Id: "+currentProcess.pid());    // Process id
+        System.out.println("Direct children: "+ currentProcess.children()); // Direct children of the process
+        System.out.println("Class name: "+currentProcess.getClass());       // Class name
+        System.out.println("All processes: "+ProcessHandle.allProcesses()); // All current processes
+        System.out.println("Process info: "+currentProcess.info());         // Process info
+        System.out.println("Is process alive: "+currentProcess.isAlive());
+        System.out.println("Process's parent "+currentProcess.parent());  // Parent of the process
+    }
+}
Index: src/com/java9/AnonymousInnerClasses.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/AnonymousInnerClasses.java b/src/com/java9/AnonymousInnerClasses.java
new file mode 100644
--- /dev/null	(date 1622439079892)
+++ b/src/com/java9/AnonymousInnerClasses.java	(date 1622439079892)
@@ -0,0 +1,36 @@
+package com.java9;
+
+//Java 9 introduced a new feature that allows us to use diamond operator with anonymous classes.
+// Using the diamond with anonymous classes was not allowed in Java 7.
+abstract class ABCD<T>{ // Diamond Operator in definition of abstract class
+    abstract T show(T a, T b);
+}
+public class AnonymousInnerClasses {
+    public static void main(String[] args) {
+        ABCD<String> a = new ABCD<>() { // diamond operator is empty, compiler infer type
+            String show(String a, String b) {
+                return a+b;
+            }
+        };
+        String result = a.show("Java9"," diamond operator is empty");
+        System.out.println(result);
+
+        ABCD<String> b = new ABCD<>() { // diamond operator is empty
+            String show(String a, String b) {
+                return a+b;
+            }
+        };
+        String result1 = a.show("Java9"," diamond operator is empty");
+        System.out.println(result1);
+    }
+}
+/*
+*Java 8 compiler throws compile time error because it can't infer type. The error message looks like the below.
+TypeInferExample.java:7: error: cannot infer type arguments for ABCD<T>
+		ABCD<String> a = new ABCD<>() {
+		                         ^
+  reason: cannot use '<>' with anonymous inner classes
+  where T is a type-variable:
+    T extends Object declared in class ABCD
+1 error
+* */
\ No newline at end of file
Index: src/com/java9/FactoryMethod.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/FactoryMethod.java b/src/com/java9/FactoryMethod.java
new file mode 100644
--- /dev/null	(date 1622439080088)
+++ b/src/com/java9/FactoryMethod.java	(date 1622439080088)
@@ -0,0 +1,37 @@
+package com.java9;
+
+import java.util.List;
+import java.util.Map;
+
+
+//Factory Methods for Immutable List, Set, Map and Map.Entry
+/*
+Factory methods are special type of static methods that are used to create unmodifiable instances of collections.
+It means we can use these methods to create list, set and map of small number of elements.
+It is unmodifiable, so adding new element will throw java.lang.UnsupportedOperationException
+* */
+public class FactoryMethod {
+
+    public static void main(String[] args) {
+
+        //Empty List/Map Example
+        List immutableList = List.of();
+        Map emptyImmutableMap = Map.of();
+
+        System.out.println("Empty List:"+immutableList);
+        System.out.println("Empty Map:"+emptyImmutableMap);
+
+        //Non-Empty List/Map Example
+        List nonimmutableList = List.of("one","two","three");
+        Map nonemptyImmutableMap = Map.of(1, "one", 2, "two", 3, "three");
+        System.out.println("No-Empty List:"+nonimmutableList);
+        System.out.println("No-Empty Map:"+nonemptyImmutableMap);
+
+        //nonimmutableList.add("1"); Exception in thread "main" java.lang.UnsupportedOperationException
+
+        //Non-Empty Map.Entry() Example
+        Map nonemptyImmutableMapyntr7 = Map.ofEntries(Map.entry("1","2"));
+        System.out.println("No-Empty Map.Entry():"+nonemptyImmutableMapyntr7);
+        //System.out.println(lst.size());
+    }
+}
Index: src/com/java9/UnderscoreKeyword.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/UnderscoreKeyword.java b/src/com/java9/UnderscoreKeyword.java
new file mode 100644
--- /dev/null	(date 1622439080132)
+++ b/src/com/java9/UnderscoreKeyword.java	(date 1622439080132)
@@ -0,0 +1,15 @@
+package com.java9;
+
+public class UnderscoreKeyword {
+
+
+    /*
+    * In earlier versions of Java, underscore can be used as identifier and to create variable name also.
+      But in Java 9 release, underscore is a keyword and can't be used as an identifier or variable name.
+      If we use the underscore character ("_") as an identifier, our source code can no longer be compiled.
+    * */
+    public static void main(String[] args) {
+        //int _ = 10; // creating variable
+        //System.out.println(_);
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1622438764645)
+++ b/.idea/misc.xml	(date 1622438764645)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_14" default="true" project-jdk-name="openjdk-14" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/classes" />
+  </component>
+</project>
\ No newline at end of file
Index: src/com/java9/VersionInfoExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/VersionInfoExample.java b/src/com/java9/VersionInfoExample.java
new file mode 100644
--- /dev/null	(date 1622439080176)
+++ b/src/com/java9/VersionInfoExample.java	(date 1622439080176)
@@ -0,0 +1,28 @@
+package com.java9;
+
+/*
+Java version-string is a format that contains version specific information.
+This version-string consists of major, minor, security and patch update releases.
+$MAJOR.$MINOR.$SECURITY.$PATCH
+$MAJOR:This version number shows a major change in Java version. i.e. java8 or java9
+
+$MINOR:These updates can be bug fixes, revision to standard API etc i.e. java 9.1
+
+$SECURITY: This version number represents security update and increase for each new security update. java 9.1.5
+
+$PATCH:This version number increases for each security and high-priority customer fixes, which has been tested together. Java 9.1.5.1 (contains major, minor, security and patch release number).
+
+ */
+
+public class VersionInfoExample {
+
+   public static void main(String[] args) {
+        Runtime.Version version = Runtime.version();                 // Getting runtime version instance
+        System.out.println("Current version is "+version);           // Getting current Java version
+        System.out.println("Major version number "+version.major()); // Getting major version number
+        System.out.println("Minor version number "+version.minor()); // Getting minor version number
+        System.out.println("Security version number "+version.security());  // Getting security version number
+        System.out.println("Pre-released information "+version.pre());      // Getting pre-release version information
+        System.out.println("Build Number "+version.build());                // Getting Optional build number
+    }
+}
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1622438764689)
+++ b/.idea/vcs.xml	(date 1622438764689)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/com/java9/SafeVarArg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/SafeVarArg.java b/src/com/java9/SafeVarArg.java
new file mode 100644
--- /dev/null	(date 1622439080112)
+++ b/src/com/java9/SafeVarArg.java	(date 1622439080112)
@@ -0,0 +1,46 @@
+package com.java9;
+
+/*
+* It is an annotation which applies on a method or constructor that takes varargs parameters.
+* It is used to ensure that the method does not perform unsafe operations on its varargs parameters.
+* It was included in Java7 and can only be applied on
+    1. Final methods
+    2. Static methods
+    3. Constructors
+
+* From Java 9, it can also be used with private instance methods.
+* */
+/*
+* A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter.
+* Applying this annotation to a method or constructor suppresses unchecked warnings about a non-reifiable variable arity (vararg) type
+* and suppresses unchecked warnings about parameterized array creation at call sites.
+
+ * */
+import java.util.ArrayList;
+import java.util.List;
+
+public class SafeVarArg {
+    @SafeVarargs
+    private void display(List<String>... products) { // Not using @SaveVarargs
+        for (List<String> product : products) {
+            System.out.println(product);
+        }
+    }
+    public static void main(String[] args) {
+        SafeVarArg p = new SafeVarArg();
+        List<String> list = new ArrayList<String>();
+        list.add("Laptop");
+        list.add("Tablet");
+        p.display(list);
+    }
+}
+
+/*
+* What happens? If we compile the following code by using older versions of Java.
+SafeVar.java:6: error: Invalid SafeVarargs annotation. Instance method display(List<String>...) is not final.
+	private void display(List<String>... products) {
+	             ^
+Note: SafeVar.java uses unchecked or unsafe operations.
+Note: Recompile with -Xlint:unchecked for details.
+1 error
+* */
\ No newline at end of file
Index: src/com/java9/TryWithResource.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/java9/TryWithResource.java b/src/com/java9/TryWithResource.java
new file mode 100644
--- /dev/null	(date 1622439079976)
+++ b/src/com/java9/TryWithResource.java	(date 1622439079976)
@@ -0,0 +1,38 @@
+package com.java9;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+
+public class TryWithResource {
+
+    public static void main(String[] args) throws FileNotFoundException {
+        /*
+        * Java introduced try-with-resource feature in Java 7 that helps to close resource automatically after being used.
+          In other words, we can say that we don't need to close resources (file, connection, network etc) explicitly,
+          try-with-resource close that automatically by using AutoClosable interface.
+        * */
+        try(FileOutputStream fileStream=new FileOutputStream("java7.txt");){
+            String greeting = "Welcome to java.";
+            byte b[] = greeting.getBytes();
+            fileStream.write(b);
+            System.out.println("File written");
+        }catch(Exception e) {
+            System.out.println(e);
+        }
+
+        /*
+        * If we do like the following code in Java 7, compiler generates an error message.
+        * error: <identifier> expected try(fileStream){
+        * */
+        FileOutputStream fileStream=new FileOutputStream("java9.txt");
+
+        try(fileStream){
+            String greeting = "Welcome to java.";
+            byte b[] = greeting.getBytes();
+            fileStream.write(b);
+            System.out.println("File written");
+        }catch(Exception e) {
+            System.out.println(e);
+        }
+    }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1622439458005)
+++ b/.idea/modules.xml	(date 1622439458005)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/java-advance-feature.iml" filepath="$PROJECT_DIR$/java-advance-feature.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
new file mode 100644
--- /dev/null	(date 1622438764777)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1622438764777)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1622438769046)
+++ b/.idea/.gitignore	(date 1622438769046)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/codeStyles/Project.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/Project.xml b/.idea/codeStyles/Project.xml
new file mode 100644
--- /dev/null	(date 1622438764733)
+++ b/.idea/codeStyles/Project.xml	(date 1622438764733)
@@ -0,0 +1,7 @@
+<component name="ProjectCodeStyleConfiguration">
+  <code_scheme name="Project" version="173">
+    <ScalaCodeStyleSettings>
+      <option name="MULTILINE_STRING_CLOSING_QUOTES_ON_NEW_LINE" value="true" />
+    </ScalaCodeStyleSettings>
+  </code_scheme>
+</component>
\ No newline at end of file
Index: .idea/sbt.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sbt.xml b/.idea/sbt.xml
new file mode 100644
--- /dev/null	(date 1622438941959)
+++ b/.idea/sbt.xml	(date 1622438941959)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ScalaSbtSettings">
+    <option name="customVMPath" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/scala_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/scala_settings.xml b/.idea/scala_settings.xml
new file mode 100644
--- /dev/null	(date 1622438941935)
+++ b/.idea/scala_settings.xml	(date 1622438941935)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ScalaProjectSettings">
+    <option name="intInjectionMapping">
+      <map>
+        <entry key="xml" value="XML" />
+      </map>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: src/com/oops/systemdesign/problem/filesystem/Directory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/filesystem/Directory.java b/src/com/oops/systemdesign/problem/filesystem/Directory.java
new file mode 100644
--- /dev/null	(date 1622439193053)
+++ b/src/com/oops/systemdesign/problem/filesystem/Directory.java	(date 1622439193053)
@@ -0,0 +1,50 @@
+package com.oops.systemdesign.problem.filesystem;
+
+import java.util.ArrayList;
+
+public class Directory  extends  Entry{
+
+    protected ArrayList<Entry> contents;
+
+    public Directory(String name, Directory parent) {
+        super(name, parent);
+        contents=new ArrayList<>();
+    }
+
+    @Override
+    public int size() {
+        int size=0;
+        for (Entry entry: contents){
+            size+= entry.size();
+        }
+        return size;
+    }
+
+    public int numberOfFile(){
+        int count=0;
+        for (Entry entry: contents){
+            if(entry instanceof Directory){
+                ++count;//Directory count as file
+                Directory d=(Directory)entry;
+                count+=d.numberOfFile();
+            }else if(entry instanceof File){
+                ++count;
+            }
+        }
+        return  count;
+    }
+
+    @Override
+    protected boolean deleteEntry(Entry entry) {
+        return contents.remove(entry);
+    }
+
+    protected boolean addEntry(Entry entry){
+        return contents.add(entry);
+    }
+
+    protected ArrayList<Entry> getContents(){
+        return contents;
+    }
+
+}
Index: src/com/oops/systemdesign/problem/filesystem/File.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/filesystem/File.java b/src/com/oops/systemdesign/problem/filesystem/File.java
new file mode 100644
--- /dev/null	(date 1622439192985)
+++ b/src/com/oops/systemdesign/problem/filesystem/File.java	(date 1622439192985)
@@ -0,0 +1,32 @@
+package com.oops.systemdesign.problem.filesystem;
+
+public class File extends Entry {
+    private int size;
+    private String content;
+    public File(String name, Directory parent,int sz) {
+        super(name, parent);
+        size=sz;
+    }
+
+    @Override
+    public int size() {
+        return 0;
+    }
+
+    @Override
+    protected boolean deleteEntry(Entry entry) {
+        return false;
+    }
+
+    public int getSize() {
+        return size;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+}
Index: src/com/oops/systemdesign/problem/filesystem/Entry.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/filesystem/Entry.java b/src/com/oops/systemdesign/problem/filesystem/Entry.java
new file mode 100644
--- /dev/null	(date 1622439193017)
+++ b/src/com/oops/systemdesign/problem/filesystem/Entry.java	(date 1622439193017)
@@ -0,0 +1,77 @@
+package com.oops.systemdesign.problem.filesystem;
+
+public abstract class Entry {
+
+    protected String name;
+    protected long created;
+    protected long lastModified;
+    protected long lastAccessed;
+    protected Directory parent;
+
+    public Entry(String name,Directory parent){
+
+        this.name=name;
+        this.parent=parent;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public long getCreated() {
+        return created;
+    }
+
+    public void setCreated(long created) {
+        this.created = created;
+    }
+
+    public long getLastModified() {
+        return lastModified;
+    }
+
+    public void setLastModified(long lastModified) {
+        this.lastModified = lastModified;
+    }
+
+    public long getLastAccessed() {
+        return lastAccessed;
+    }
+
+    public void setLastAccessed(long lastAccessed) {
+        this.lastAccessed = lastAccessed;
+    }
+
+    public Directory getParent() {
+        return parent;
+    }
+
+    public void setParent(Directory parent) {
+        this.parent = parent;
+    }
+
+    public boolean delete(){
+        if(parent==null){
+            return false;
+        }
+        return parent.deleteEntry(this);
+    }
+
+    public abstract int size();
+
+    public String getFullPath(){
+        if(parent==null) return null;
+        return parent.getFullPath()+"/"+this.name;
+    }
+
+    public void changeName(String name){
+        this.name=name;
+    }
+
+    protected abstract boolean deleteEntry(Entry entry);
+
+}
Index: src/com/oops/systemdesign/problem/circulararray/Queue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/circulararray/Queue.java b/src/com/oops/systemdesign/problem/circulararray/Queue.java
new file mode 100644
--- /dev/null	(date 1622439193185)
+++ b/src/com/oops/systemdesign/problem/circulararray/Queue.java	(date 1622439193185)
@@ -0,0 +1,6 @@
+package com.oops.systemdesign.problem.circulararray;
+
+public interface Queue {
+    public void   enqueue(double x) throws Exception; // Full queue
+    public double dequeue()         throws Exception; // Empty queue
+}
Index: target/classes/com/java8/Difference : Default Method and Regular Method
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/com/java8/Difference : Default Method and Regular Method b/target/classes/com/java8/Difference : Default Method and Regular Method
new file mode 100644
--- /dev/null	(date 1622439571743)
+++ b/target/classes/com/java8/Difference : Default Method and Regular Method	(date 1622439571743)
@@ -0,0 +1,12 @@
+Difference Between Default Method and Regular Method
+Default Method is different from the regular method in the sense that default method comes with default modifier. 
+Additionally, methods in classes can use and modify method arguments as well as the fields of their class, 
+but default method, on the other hand, can only access its arguments as interfaces do not have any state.
+
+In summary, Default methods enable us to add new functionality to existing interfaces without breaking older implementation of these interfaces.
+
+When we extend an interface that contains a default method, we can perform following,
+
+Not override the default method and will inherit the default method.
+Override the default method similar to other methods we override in subclass..
+Redeclare default method as abstract, which force subclass to override it.
\ No newline at end of file
Index: src/com/oops/systemdesign/problem/circulararray/testProg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/circulararray/testProg.java b/src/com/oops/systemdesign/problem/circulararray/testProg.java
new file mode 100644
--- /dev/null	(date 1622439192961)
+++ b/src/com/oops/systemdesign/problem/circulararray/testProg.java	(date 1622439192961)
@@ -0,0 +1,27 @@
+package com.oops.systemdesign.problem.circulararray;
+
+public class testProg {
+
+    public static void main( String[] args )  throws Exception
+    {
+        Queue  myQ = new ArrayQueue(10);
+        double x;
+
+        myQ.enqueue(1.0);
+        System.out.println("enqueue(1.0): " + "myQ = " + myQ);
+        myQ.enqueue(2.0);
+        System.out.println("enqueue(2.0): " + "myQ = " + myQ);
+        myQ.enqueue(3.0);
+        System.out.println("enqueue(3.0): " + "myQ = " + myQ);
+
+        System.out.println("\nBefore dequeue:");
+        System.out.println("myQ = " + myQ);
+
+        x = myQ.dequeue();
+        System.out.println("x = " + x + ", myQ = " + myQ);
+        x = myQ.dequeue();
+        System.out.println("x = " + x + ", myQ = " + myQ);
+        x = myQ.dequeue();
+        System.out.println("x = " + x + ", myQ = " + myQ);
+    }
+}
Index: src/com/oops/systemdesign/problem/circulararray/ArrayQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/oops/systemdesign/problem/circulararray/ArrayQueue.java b/src/com/oops/systemdesign/problem/circulararray/ArrayQueue.java
new file mode 100644
--- /dev/null	(date 1622439193121)
+++ b/src/com/oops/systemdesign/problem/circulararray/ArrayQueue.java	(date 1622439193121)
@@ -0,0 +1,93 @@
+package com.oops.systemdesign.problem.circulararray;
+
+public class ArrayQueue implements Queue{
+
+    /* ==========================================
+      Node "inner class"
+      ========================================== */
+    public class Node
+    {
+        double value;
+        Node   next;
+
+        public Node( double x )
+        {
+            value = x;
+            next  = null;
+        }
+
+        public String toString()
+        {
+            return "" + value;
+        }
+    }
+
+    public double[] buf;          // Circular buffer
+    public int      read, write;  // read and write pointers
+
+    // Constructor
+    public ArrayQueue(int size)
+    {
+        buf = new double[size];    // Create array for circular buffer
+
+        read = 0;                  // Initialized read & write pointers
+        write = 0;
+    }
+
+    /* ====================================================
+        enqueue(x ):
+       ==================================================== */
+    public void enqueue( double x )   throws Exception
+    {
+        if ( read == ( write + 1 ) % (buf.length) )
+        {
+            throw new Exception("Queue is full");
+        }
+
+        buf[write] = x;                 // Store x in buf at write pointer
+        write = (write+1)%(buf.length); // Advance the write pointer
+    }
+
+    /* ====================================================
+        dequeue():
+       ==================================================== */
+    public double dequeue( ) throws Exception
+    {
+        double r;   // Variable used to save the return value
+
+        if ( read == write )
+        {
+            throw new Exception("Queue is empty");
+        }
+
+        r = buf[read];                 // Save return value
+        read = (read+1)%(buf.length);  // Advance the read pointer
+
+        return r;
+    }
+
+    /* ====================================================
+       Convert all elems in the list into a string:
+
+        Format:"v1,v2,v3,..."
+       ==================================================== */
+    public String toString()
+    {
+        String out;
+        int i;
+
+        out = "[";
+
+        for ( i = read; ((i)%buf.length) != write; i++ )
+        {
+            out += buf[i];       // Concat next list element
+
+            if ( ((i+1)%buf.length) != write )
+                out += " , ";     // Not last elem: add a ","
+        }
+
+        out += "]";
+        return out;
+    }
+
+}
diff --git a/src/com/java8/stream/pom.xml b/src/com/java8/streamapi/pom.xml
rename from src/com/java8/stream/pom.xml
rename to src/com/java8/streamapi/pom.xml
